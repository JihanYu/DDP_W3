install.packages("swirl")
library(swirl)
swirl()
head(pValues)
sum(pValues < 0.05)
p.adjust(pValues, method="bonferroni")
sum(p.adjust(pValues, method="bonferroni") < 0.05)
sum(p.adjust(pValues, method="BH") < 0.05)
tail(trueStatus)
table(trueStatus < 0.05)
table(pValues2 < 0.05, trueStatus )
24/1000 * 100
24/50
24/500 * 100
24/500
p.adjust(pValues2, method="bonferroni"
)
table(p.adjust(pValues2, method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2, method="BH") < 0.05, trueStatus)
1/6
sum(1:6)/6
pring(g2)
print(g2)
head()
father(father)
head(father)
?father.son
father
s
head(sh)
length(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace=TRUE)
resam <- matrix(sam, byrow=TRUE, nrow=B)
resam <- matrix(sam, nrow=B, ncol=nh)
?apply
meds <- apply(resam, MARGIN=1, FUN=median())
meds <- apply(resam, MARGIN=1, FUN=median
)
median(fh) - meds
median(meds) - median(fh)
sd(meds)
se
sd
sd(resampledMedians)
quantile
?quantile
quantile(resampledMedians, c(0.025, 0.975))
quantile(meds, c(0.025, 0.975))
dim(InsectSprays)
colnames(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
C
group
testStat
obs
obs <- testStat(BCcounts, group)
obs
Bdata$count - Cdata$count
mean(Bdata$count) - mea(Cdata$count)
mean(Bdata$count) - mean(Cdata$count)
s
sample
ab
cd
efg
sample(group)
perms
perms <- sapply(1:1000, function(i) testStat(BCcounts, sample(group)))
perms <- sapply(1:10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms>obs)
testStat(DEcounts, group)
perms <- sapply(1:10000, function(i) testStat(DEcounts, sample(group)))
head(mtcars)
str(mtcars)
lm.1 <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
summary(lm.1)
##### Problem 2 #####  XXXXX
lm.2.wt <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
lm.2 <- lm(mpg ~ factor(cyl), data=mtcars)
anova(lm.2.wt, lm.2)
summary(lm.2)$coef
summary(lm.2.wt)$coef
##### Problem 2 #####  XXXXX
lm.2.wt <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
lm.2 <- lm(mpg ~ factor(cyl), data=mtcars)
anova(lm.2.wt, lm.2)
summary(lm.2)$coef
summary(lm.2.wt)$coef
## showing how it's actually calculated
xm <- cbind(1, x)
diag(xm %*% solve(t(xm) %*% xm) %*% t(xm))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
## showing how it's actually calculated
xm <- cbind(1, x)
diag(xm %*% solve(t(xm) %*% xm) %*% t(xm))
##### Problem 6 #####
dfbetas(lm.5)
##### Problem 1 #####
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
##### Problem 1 #####
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
# A
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
library(caret)
install.packages("caret")
##### Problem 3 #####
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(AlzheimerDisease)
names(AlzheimerDisease)
names(adData)
c(58:69)
length(c(58:69))
which(names(adData)=="diagnosis")
head(names(adData))
training.IL <- training[, c(1, IL.id)]
testing.IL <- testing[, c(1, IL.id)]
IL.id <- c(58:69)
training.IL <- training[, c(1, IL.id)]
testing.IL <- testing[, c(1, IL.id)]
library(AppliedPredictiveModeling)
set.seed(3433)
##### Problem 4 #####
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL.id <- c(58:69)
training.IL <- training[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
preProc <- preProcess(training.IL, method="pca", pcaComp=1)
trainPC <- predict(reProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
install.packages("e1071", dependencies=TRUE)
library(caret)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
rm(list=ls())
##### Problem 4 #####
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL.id <- c(58:69)
training.IL <- training[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
PCA.training <- function(n.pca){
preProc <- preProcess(training.IL, method="pca", pcaComp=1)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
return(predict(modelFit, testPC))
}
confusionMatrix(testing$diagnosis, PCA.training(1))
?sapply
##### Problem 4 #####
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL.id <- c(58:69)
training.IL <- training[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
PCA.training <- function(n.pca){
preProc <- preProcess(training.IL, method="pca", pcaComp=1)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, PCA.training(1))
}
n.training <- c(7:11)
sapply(n.training, CA.training)
sapply(n.training, PCA.training)
rm(list=ls())
##### Problem 4 #####
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL.id <- c(58:69)
training.IL <- training[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
PCA.training <- function(n.pca){
preProc <- preProcess(training.IL, method="pca", pcaComp=1)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
return(testPC)
}
PCA.testing <- function(n){
confusionMatrix(testing$diagnosis, PCA.training(n))
}
n.PCAcomp <- c(7:11)
sapply(n.PCAcomp, PCA.testing)
confusionMatrix(testing$diagnosis, PCA.training(7))
PCA.training <- function(n.pca){
preProc <- preProcess(training.IL, method="pca", pcaComp=n.pca)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
return(testPC)
}
confusionMatrix(testing$diagnosis, PCA.training(7))
PCA.training <- function(n.pca){
preProc <- preProcess(training.IL, method="pca", pcaComp=n.pca)
print(1)
trainPC <- predict(preProc, training.IL)
print(2)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
return(testPC)
}
confusionMatrix(testing$diagnosis, PCA.training(7))
print(5)
PCA.training <- function(n.pca){
preProc <- preProcess(training.IL, method="pca", pcaComp=n.pca)
print(1)
trainPC <- predict(preProc, training.IL)
print(2)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
print(3)
testPC <- predict(preProc, testing.IL)
print(4)
return(testPC)
print(5)
}
confusionMatrix(testing$diagnosis, PCA.training(7))
preProc <- preProcess(training.IL, method="pca", pcaComp=n.pca)
preProc <- preProcess(training.IL, method="pca", pcaComp=7)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, PCA.training(7))
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
head(testPC)
str(testPC)
a <- function(abcd){}
a <- function(abcd){
ab <- c(1:10)
cd <- c(11:20)
df.a <- data.frame(ab, cd)
return(df.a)
}
a(3)
a <- function(abcd){
ab <- rnorm(abcd)
cd <- rnorm(abcd)
df.a <- data.frame(ab, cd)
data.frame(df.a)
}
a(3)
a(3)
a(3)
a(3)
data.frame(a(3))
a(3)
str(a(3))
str(testPC)
rm(list=ls())
##### Problem 4 #####
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL.id <- c(58:69)
training.IL <- training[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
preProc <- preProcess(training.IL, method="pca", pcaComp=7)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=8)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=9)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=11)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
4 + 3 + 18 + 57
4 + 3 + 18 + 57
preProc <- preProcess(training.IL, method="pca", pcaComp=11)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=7)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=8)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=9)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
(1+58)/82
(2+58)/82
(4+57)/82
preProc <- preProcess(training.IL, method="pca", thresh=0.9)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
rm(list=ls())
##### Problem 5 #####
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL.id <- c(58:69)
training.IL <- training[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
preProc <- preProcess(training.IL, method="pca", thresh=0.8)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
rm(list=ls())
##### Quiz 1 #####
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
##### Quiz 3 #####
library(pgmm)
install.packages("pgmm")
##### Quiz 3 #####
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
##### Quiz 4 #####
library(ElemStatLearn)
install.packages("ElemStatLearn")
install.packages("Rtools")
version
version
install.packages("Rtools")
##### Quiz 1 #####
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
names(segmentationOriginal)
names(segmentationOriginal$Case)
head(segmentationOriginal$Case)
training <- subset(Case=="Train")
?subset
training <- subset(segmentationOriginal, Case=="Train")
sum(segmentationOriginal$Case=="Train")
head(segmentationOriginal$Cell)
head(segmentationOriginal$Class)
training <- subset(segmentationOriginal, Case=="Train")
testing <- subset(segmentationOriginal, Case=="Test")
set.seed(125)
modelFit <- train(Class ~ ., method="rpart", data=training)
print(modelFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modelFit$finalModel)
workingpath <- "C:\\Users\\pc\\Desktop\\Jihan"
setwd(workingpath)
pml.training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", header=TRUE)
pml.testing <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", header=TRUE)
library(caret);  library(ggplot2);  library(rattle)
training <- pml.training[, c(8:160)]
factor.id <- which(sapply(training, is.factor));  factor.n <- length(factor.id)
for(i in factor.id[-factor.n]){
training[, i] <- as.character(training[, i])
training[, i] <- as.numeric(training[, i])
}
training[is.na(training)] <- 0
inTrain <- createDataPartition(training$classe, p=0.7, list=FALSE)
training.in <- training[inTrain,];  testing.in <- training[-inTrain,]
dim(training.in);  dim(testing.in)
modFit.rpart <- train(classe ~ ., method="rpart", data=training.in)
print(modFit.rpart)
fancyRpartPlot(modFit.rpart$finalModel)
pr.train.rpart <- predict(modFit.rpart, newdata=training.in)
confusionMatrix(pr.train.rpart, training.in$classe)
pr.test.rpart <- predict(modFit.rpart, newdata=testing.in)
confusionMatrix(pr.test.rpart, testing.in$classe)
modFit.rf <- train(classe ~ ., method="rf", data=training.in, prox=TRUE)
testing <- pml.testing[, c(8:160)]
factor.id <- which(sapply(testing, is.factor));  factor.n <- length(factor.id)
for(i in factor.id[-factor.n]){
testing[, i] <- as.character(testing[, i])
testing[, i] <- as.numeric(testing[, i])
}
testing[is.na(testing)] <- 0
predict(modFit.rpart, newdata=testing)
kMeans1 <- kmeans(subset(training.in, select=-c(classe)), centers=5)
res.kmeans <- kMeans1$cluster
res.kmeans[res.kmeans==1] <- "A";  res.kmeans[res.kmeans==2] <- "B";
res.kmeans[res.kmeans==3] <- "C";  res.kmeans[res.kmeans==4] <- "D";
res.kmeans[res.kmeans==5] <- "E"
res.kmeans <- as.factor(res.kmeans)
training.in$clusters <- res.kmeans
confusionMatrix(training.in$clusters, training.in$classe)
modFit.kmeans <- train(clusters ~ ., data=subset(training.in, select=-c(classe)), method="rpart")
pr.train.kmeans <- predict(modFit.kmeans, newdata=training.in)
confusionMatrix(pr.train.kmeans, training.in$classe)
pr.test.kmeans <- predict(modFit.kmeans, newdata=testing.in)
confusionMatrix(pr.test.kmeans, testing.in$classe)
predict(modFit.kmeans, newdata=testing)
predict(modFit.rpart, newdata=testing)
8/20
